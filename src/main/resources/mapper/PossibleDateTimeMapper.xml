<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.swyp3.babpool.domain.possibledatetime.dao.PossibleDateTimeRepository">

    <resultMap id="possibleDateTimeResultMap" type="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime">
        <result property="possibleDateTimeId" column="possible_datetime_id"/>
        <result property="possibleDateTime" column="possible_datetime"/>
        <result property="possibleDateTimeStatus" column="possible_datetime_status"/>
        <result property="userId" column="user_id"/>
    </resultMap>

    <!-- ==============================  SELECT  ============================== -->

    <select id="findAllPossibleDateAndTimeByProfileIdAndNowDateWithoutAcceptOrDone" parameterType="long" resultType="com.swyp3.babpool.domain.profile.domain.PossibleDateAndTime">
        SELECT
            pdate.possible_date_id AS possibleDateId,
            pdate.possible_date AS possibleDate,
            GROUP_CONCAT(ptime.possible_time_id) AS possibleTimeIdGroupConcat,
            GROUP_CONCAT(ptime.possible_time_start) AS possibleTimeGroupConcat
        FROM t_possible_date pdate
                 INNER JOIN t_possible_time ptime ON pdate.possible_date_id = ptime.possible_date_id
                 LEFT JOIN t_appointment appoint ON ptime.possible_time_id = appoint.possible_time_id
            AND appoint.appointment_status IN ('ACCEPT', 'DONE')
        WHERE
            pdate.profile_id = #{profileId}
          AND pdate.possible_date >= DATE_FORMAT(NOW() ,'%Y-%m-%d')
          AND appoint.appointment_id IS NULL
        GROUP BY pdate.possible_date
        ORDER BY pdate.possible_date ASC;
    </select>

    <select id="checkReferenceInAppointmentRequestDate" resultType="boolean">
        SELECT EXISTS(
            SELECT 1
            FROM t_possible_time
            WHERE possible_date_id = #{possibleDateId}
        )
    </select>

    <select id="checkExistPossibleDate" resultType="long">
        SELECT COALESCE(
            (SELECT possible_date_id
             FROM t_possible_date
             WHERE possible_date = #{possibleDate}
               AND profile_id = #{profileId}
            LIMIT 1),
        0) AS id;
    </select>

    <select id="checkExistPossibleTime" resultType="boolean">
        SELECT EXISTS(
            select 1
            from t_possible_time
            where possible_date_id = (
                    select possible_date_id
                    from t_possible_date
                    where profile_id = #{profileId}
                    AND possible_date = #{possibleDate})
            AND possible_time_start = #{possibleTimeStart}) as exist;
    </select>

    <select id="findAllByUserId" resultType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime">
        SELECT possible_datetime_id, possible_datetime, possible_datetime_status, user_id
        FROM t_possible_datetime
        WHERE user_id = #{userId}
    </select>

    <select id="findAllByProfileIdWhereFromThisMonth" resultType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime">
        SELECT possible_datetime_id, possible_datetime, possible_datetime_status, user_id
        FROM t_possible_datetime
        WHERE user_id IN (
            SELECT user_id
            FROM t_profile
            WHERE profile_id = #{profileId}
        )
          AND possible_datetime >= DATE_FORMAT(NOW(), '%Y-%m-01')
    </select>

    <select id="findByUserIdAndDateTimeForUpdate" resultType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime">
        SELECT possible_datetime_id as possibleDateTimeId,
               possible_datetime as possibleDateTime,
               possible_datetime_status as possibleDateTimeStatus,
               user_id as userId
        FROM t_possible_datetime
        WHERE possible_datetime_id = #{possibleDateTimeId}
          AND user_id = #{userId}
        FOR UPDATE;
    </select>

    <select id="findByUserIdAndDateTimeId" resultMap="possibleDateTimeResultMap">
        SELECT *
        FROM t_possible_datetime
        WHERE possible_datetime_id = #{possibleDateTimeId}
          AND user_id = #{userId}
    </select>

    <select id="findAllByUserIdWhereFromThisMonth" resultType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime">
        SELECT possible_datetime_id, possible_datetime, possible_datetime_status, user_id
        FROM t_possible_datetime
        WHERE user_id = #{userId}
          AND possible_datetime >= DATE_FORMAT(NOW(), '%Y-%m-01')
    </select>

    <select id="findById" resultType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime">
        SELECT possible_datetime_id, possible_datetime, possible_datetime_status, user_id
        FROM t_possible_datetime
        WHERE possible_datetime_id = #{possibleDateTimeId}
    </select>

    <select id="findByUserIdAndDateTimeWhereStatus" resultType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime">
        SELECT possible_datetime_id, possible_datetime, possible_datetime_status, user_id
        FROM t_possible_datetime
        WHERE user_id = #{receiverUserId}
            AND possible_datetime_status = #{possibleDateTimeStatus}
            AND possible_datetime = #{possibleDateTime}
    </select>

    <!-- ==============================  INSERT  ============================== -->

    <insert id="save" parameterType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime">
        INSERT INTO t_possible_datetime (possible_datetime_id, possible_datetime, possible_datetime_status, user_id)
        VALUES (#{possibleDateTimeId}, #{possibleDateTime}, 'AVAILABLE', #{userId})
    </insert>

    <insert id="savePossibleDateTimeList">
        INSERT INTO t_possible_datetime (possible_datetime_id, possible_datetime, possible_datetime_status, user_id)
        VALUES
        <foreach collection="possibleDateTimeList" item="possibleDateTime" separator=",">
            (#{possibleDateTime.possibleDateTimeId}, #{possibleDateTime.possibleDateTime}, 'AVAILABLE', #{possibleDateTime.userId})
        </foreach>
    </insert>

    <insert id="savePossibleDateTimeListWhereNotExist">
        INSERT INTO t_possible_datetime (possible_datetime_id, possible_datetime, possible_datetime_status, user_id)
        SELECT possibleDateTimeId, possibleDateTime, possibleDateTimeStatus, userId
        FROM (
        <foreach collection="possibleDateTimeList" item="possibleDateTime" separator=" UNION ALL ">
            SELECT CAST(#{possibleDateTime.possibleDateTimeId} AS BIGINT) AS possibleDateTimeId,
            CAST(#{possibleDateTime.possibleDateTime} AS TIMESTAMP) AS possibleDateTime,
            CAST(#{possibleDateTime.possibleDateTimeStatus} AS VARCHAR) AS possibleDateTimeStatus,
            CAST(#{possibleDateTime.userId} AS BIGINT) AS userId
        </foreach>
        ) AS new_values
        WHERE NOT EXISTS (
        SELECT 1
        FROM t_possible_datetime
        WHERE user_id = new_values.userId
        AND possible_datetime = new_values.possibleDateTime
        );
    </insert>


    <insert id="insertPossibleDate" parameterType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateInsertDto"
            useGeneratedKeys="true" keyProperty="possibleDateId">
        INSERT INTO t_possible_datetime(possible_date,profile_id)
        VALUES (#{date}, #{profileId})
    </insert>

    <insert id="insertPossibleTime" parameterType="map">
        INSERT INTO t_possible_time
            (possible_date_id, possible_time_start, possible_time_range)
        VALUES (#{dateId}, #{time}, 1)
    </insert>

    <insert id="insertPossibleDateTime" parameterType="com.swyp3.babpool.domain.possibledatetime.domain.PossibleDateTime"
            useGeneratedKeys="true" keyProperty="possibleDateTimeId">
        INSERT INTO t_possible_datetime(possible_datetime_id, possible_datetime, possible_datetime_status, user_id)
        VALUES (#{possibleDateTimeId}, #{possibleDateTime}, #{possibleDateTimeStatus}, #{userId})
    </insert>

    <!-- ==============================  UPDATE  ============================== -->

    <update id="updatePossibleDateTimeStatus">
        UPDATE t_possible_datetime
        SET possible_datetime_status = #{status}
        WHERE possible_datetime_id = #{possibleDateTimeId}
        AND possible_datetime_status = 'AVAILABLE';
    </update>

    <!-- ==============================  DELETE  ============================== -->

    <delete id="deletePossibleDate">
        DELETE FROM t_possible_date
        WHERE profile_id=#{profileId}
            AND possible_datetime_id = #{dateId}
    </delete>

    <delete id="deletePossibleTime">
        DELETE FROM t_possible_time
        WHERE possible_date_id = #{dateId}
            AND possible_time_id = #{timeId}
    </delete>

    <delete id="deletePossibleDateTimeWhereStatusIsNotReserved">
        <choose>
            <when test="possibleDateTimeDelList != null and possibleDateTimeDelList.size() != 0">
                DELETE FROM t_possible_datetime
                WHERE possible_datetime_id IN (
                    SELECT temp.possible_datetime_id
                    FROM (
                        SELECT possible_datetime_id
                        FROM t_possible_datetime
                        WHERE user_id = #{userId}
                        AND possible_datetime_status != 'RESERVED'
                        AND possible_datetime IN
                        <foreach collection="possibleDateTimeDelList" item="possibleDateTime" open="(" close=")" separator=",">
                            #{possibleDateTime}
                        </foreach>
                    ) AS temp
                )
            </when>
        </choose>

    </delete>

</mapper>